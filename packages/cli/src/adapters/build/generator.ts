import * as fs from 'fs'
import * as path from 'path'
import type { IgniterBuildConfig } from './watcher'
import { createChildLogger } from '../logger'
import { createTimelineManager } from '@/lib/timeline-manager'

type IgniterRouterSchema = {
  config: {
    baseURL: string
    basePATH: string
  }
  controllers: Record<string, any>
  processor: any
  handler: any
  $context: any
  $plugins: any
  caller: any
}

type IgniterRouter = {
  config: {
    baseURL: string
    basePATH: string
  }
  controllers: Record<string, any>
  processor: any
  handler: any
  $context: any
  $plugins: any
  caller: any
}

/**
 * Get file size in a human-readable format
 */
function getFileSize(filePath: string): string {
  try {
    const stats = fs.statSync(filePath)
    const bytes = stats.size

    if (bytes < 1024) return `${bytes}b`
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)}kb`
    return `${(bytes / (1024 * 1024)).toFixed(1)}mb`
  } catch {
    return '0b'
  }
}

import { IntrospectedRouter, introspectRouter } from './introspector';

/**
 * Generate client files from Igniter router
 */
export async function generateSchemaFromRouter(
  router: IgniterRouter,
  config: IgniterBuildConfig
) {
  const logger = createChildLogger({ component: 'generator' })
  const timeline = createTimelineManager(logger)

  try {
    // Start timeline process
    timeline.start('Generating Igniter.js Schema', 4)

    // Step 1: Extract router schema
    timeline.step('Extracting router schema')
    const { schema, stats } = introspectRouter(router)
    timeline.stepSuccess('Schema extracted', {
      controllers: stats.controllers,
      actions: stats.actions
    })

    // Step 2: Prepare output directory
    timeline.step('Preparing output directory')
    const outputDir = config.outputDir || 'generated'
    await ensureDirectoryExists(outputDir)
    const outputPath = path.resolve(outputDir)
    timeline.stepSuccess('Output directory ready', {
      path: path.relative(process.cwd(), outputPath)
    })

    // Step 3: Generate schema file
    timeline.step('Generating schema file')
    const schemaFilePath = await generateSchemaFile(schema, outputDir, config)
    const schemaSize = getFileSize(schemaFilePath)
    timeline.substep(`igniter.schema.ts (${schemaSize})`)
    timeline.stepSuccess('Schema file generated')

    // Step 4: Generate client file
    timeline.step('Generating client file')
    const clientFilePath = await generateClientFile(schema, outputDir, config)
    const clientSize = getFileSize(clientFilePath)
    timeline.substep(`igniter.client.ts (${clientSize})`)
    timeline.stepSuccess('Client file generated')

    // Complete timeline
    timeline.complete('Schema generation completed')

    return {
      schemaPath: schemaFilePath,
      clientPath: clientFilePath,
      stats
    }

  } catch (error) {
    timeline.fail('Schema generation failed', error as Error)
    throw error
  }
}

/**
 * Generate schema TypeScript file
 */
async function generateSchemaFile(
  schema: IntrospectedRouter,
  outputDir: string,
  config: IgniterBuildConfig
): Promise<string> {
  const content = `// Generated by @igniter-js/cli - DO NOT EDIT

export const AppRouterSchema = ${JSON.stringify(schema, null, 2)} as const

export type AppRouterSchemaType = typeof AppRouterSchema
`

  const filePath = path.join(outputDir, 'igniter.schema.ts')
  await writeFileWithHeader(filePath, content, config)

  return filePath
}

/**
 * Generate client TypeScript file
 */
async function generateClientFile(
  schema: IntrospectedRouter,
  outputDir: string,
  config: IgniterBuildConfig
): Promise<string> {
  const filePath = path.join(outputDir, 'igniter.client.ts')

  // Only generate the client file if it doesn't already exist
  if (fs.existsSync(filePath)) {
    const logger = createChildLogger({ component: 'generator' })
    logger.info('Skipping client file generation, already exists', { path: filePath })
    return filePath
  }

  const content = `* eslint-disable */
/* prettier-ignore */

import { createIgniterClient, useIgniterQueryClient } from '@igniter-js/core/client'
import type { AppRouterType } from './igniter.router'

/**
* Type-safe API client generated from your Igniter router
*
* Usage in Server Components:
* const users = await api.users.list.query()
*
* Usage in Client Components:
* const { data } = api.users.list.useQuery()
*
* Note: Adjust environment variable prefixes (e.g., NEXT_PUBLIC_, BUN_PUBLIC_, DENO_PUBLIC_, REACT_APP_)
*       according to your project's framework/runtime (Next.js, Bun, Deno, React/Vite, etc.).
*/
export const api = createIgniterClient<AppRouterType>({
baseURL: process.env.NEXT_PUBLIC_IGNITER_API_URL, // Adapt for your needs
basePath: process.env.NEXT_PUBLIC_IGNITER_API_BASE_PATH,
router: () => {
  if (typeof window === 'undefined') {
    return require('./igniter.router').AppRouter
  }

  return require('./igniter.schema').AppRouterSchema
},
})

/**
  * Type-safe API client generated from your Igniter router
  *
  * Usage in Server Components:
  * const users = await api.users.list.query()
  *
  * Usage in Client Components:
  * const { data } = api.users.list.useQuery()
  */
export type ApiClient = typeof api

/**
  * Type-safe query client generated from your Igniter router
  *
  * Usage in Client Components:
  * const { invalidate } = useQueryClient()
  */
export const useQueryClient = useIgniterQueryClient<AppRouterType>;
`
  await writeFileWithHeader(filePath, content, config)

  return filePath
}

/**
 * Write file with generation header
 */
async function writeFileWithHeader(
  filePath: string,
  content: string,
  config: IgniterBuildConfig
) {
  const header = generateFileHeader(config)
  const fullContent = header + '\n\n' + content

  await fs.promises.writeFile(filePath, fullContent, 'utf8')
}

/**
 * Generate file header with metadata
 */
function generateFileHeader(config: IgniterBuildConfig): string {
  const timestamp = new Date().toISOString()

  return `/* eslint-disable */
/* prettier-ignore */

/**
 * Generated by @igniter-js/cli
 *
 * WARNING: DO NOT EDIT THIS FILE MANUALLY
 *
 * This file was automatically generated from your Igniter router.
 * Any changes made to this file will be overwritten when the CLI regenerates it.
 *
 * To modify the client API, update your controller files instead.
 *
 * Generated: ${timestamp}
 * Framework: ${config.framework}
 * Output: ${config.outputDir}
 */`
}

/**
 * Ensure directory exists, create if it doesn't
 */
async function ensureDirectoryExists(dirPath: string) {
  try {
    await fs.promises.access(dirPath)
  } catch (error) {
    // Directory doesn't exist, create it
    await fs.promises.mkdir(dirPath, { recursive: true })
  }
}
