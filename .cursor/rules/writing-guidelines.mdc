---
alwaysApply: true
---
---
applyTo: '**'
---
# Writing Guidelines for Humans and LLMs

This guide ensures consistent, high-quality documentation across all Igniter.js content types (blog, docs, templates, updates). It's designed for both human authors and AI agents to produce excellent developer experiences.

## Core Style Principles

| Principle | Definition | Example: Good | Example: Bad |
|-----------|------------|--------------|-------------|
| Clear Language | Use simple, direct language with short words and sentences. Avoid unnecessary jargon. | "Click save to store your changes." | "Initiate the persistence process by activating the storage mechanism." |
| Developer-Focused | Write in a professional but approachable tone that addresses the reader directly. | "You can configure this option in the settings panel." | "Users might want to adjust configuration parameters." |
| Example-Driven | Include practical code examples for all key concepts. | "Use the `useState` hook: `const [count, setCount] useState(0)`" | "State management is an important React concept." |
| Active Voice | Make the subject perform the action rather than receive it. | "React renders the component." | "The component is rendered by React." |
| Success-First | Show working examples before explaining theory. | "First, create a component: `function Button() {...}`. Now let's understand how it works..." | "The component lifecycle has several phases which you must understand before implementation..." |
| Transparent | Be honest about limitations and challenges. | "This approach works well for small datasets but may cause performance issues with larger ones." | "This is the optimal solution for data management." |
| Consistent Terms | Use the same terminology throughout to refer to the same concepts. | "Route" consistently or "endpoint" consistently, not both interchangeably. | Mixing "callback function" and "handler" for the same concept. |

---

## Fumadocs-Specific Guidelines

Igniter.js documentation uses **Fumadocs**, a modern documentation framework with MDX support and powerful components.

### Available MDX Components

Always use these components from `mdx-components.tsx` when appropriate:

#### Content Organization
- **`<Callout />`** - Highlight important information (types: `info`, `warn`, `error`, `success`)
- **`<Accordions />` + `<Accordion />`** - Collapsible content sections
- **`<Tabs />` + `<Tab />`** - Tabbed content (supports persistence with `groupId`)
- **`<Steps />` + `<Step />`** - Step-by-step instructions

#### Code & Files
- **`<CodeBlock />`** - Enhanced code blocks with syntax highlighting
- **`<Files />`, `<Folder />`, `<File />`** - File structure visualization
- **`<TypeTable />`** - API/type documentation tables

#### Other Components
- **`<Banner />`** - Page-level announcements
- **`<Card />`, `<Cards />`** - Content cards for links/features

### Component Usage Examples

```mdx
<!-- Callout for warnings -->
<Callout type="warn" title="Important">
  Make sure to configure your environment variables before deployment.
</Callout>

<!-- Steps for tutorials -->
<Steps>
  <Step>
    ### Install Dependencies
    Run `npm install @igniter-js/core`
  </Step>
  
  <Step>
    ### Configure
    Create a `igniter.config.ts` file
  </Step>
</Steps>

<!-- Tabs for multiple options -->
<Tabs items={['npm', 'pnpm', 'yarn', 'bun']} groupId="package-manager">
  <Tab value="npm">
    ```bash
    npm install @igniter-js/core
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm add @igniter-js/core
    ```
  </Tab>
</Tabs>

<!-- File structure -->
<Files>
  <Folder name="src" defaultOpen>
    <Folder name="features">
      <File name="users.controller.ts" />
    </Folder>
    <File name="igniter.ts" />
  </Folder>
</Files>
```

---

## üîç CRITICAL: Always Verify Implementation Before Documenting

**NEVER assume how Igniter.js APIs work. ALWAYS verify the actual implementation.**

Before documenting any feature, API, or pattern:

1. **Search the codebase** for the actual implementation in `packages/`
2. **Read the source code** to understand:
   - Function signatures and parameters
   - Return types and structures
   - Available methods and properties
   - Type definitions in `.d.ts` files
3. **Check interfaces** (`interface` and `type` definitions) to understand contracts
4. **Review existing examples** in the codebase for correct usage patterns
5. **Test your understanding** by looking at how it's used elsewhere

### Why This Matters

- **Type Safety**: Incorrect API usage breaks TypeScript inference
- **Developer Trust**: Wrong documentation causes frustration and bugs
- **Code Consistency**: Ensures all examples match the actual implementation
- **Framework Evolution**: APIs change, and documentation must reflect current state

### Verification Checklist

- [ ] Found the implementation in `packages/`
- [ ] Read the source code and interfaces
- [ ] Verified all imports and exports
- [ ] Checked type definitions
- [ ] Reviewed how it's used in existing code/docs
- [ ] Ensured code examples compile and work correctly

## For LLM Content Generation

### Formatting Instructions

When generating content with an LLM, ensure the following:

1. **Verify Implementation First**: Always check `packages/` before documenting any API
2. **Structured Data**: Present information in well-defined structures like tables, numbered lists, and hierarchical headings
3. **Explicit Examples**: Always include contrastive examples (good vs. bad)
4. **Clear Boundaries**: Use explicit section markers and consistent formatting patterns
5. **Context-Awareness**: Begin with the most critical information for the document type
6. **Pattern Consistency**: Maintain consistent patterns throughout similar sections
7. **Component Usage**: Use Fumadocs components appropriately for the content type

### LLM Content Templates

For each document type, LLMs should structure content as follows:

```yaml
DocumentType: [Tutorial|HowTo|Reference|Explanation|BlogPost|Update]
Audience: [Beginner|Intermediate|Advanced]
PrimaryGoal: "Single sentence describing document purpose"
Sections:
  - Name: "Introduction"
    Content: "Clear goal statement with outcomes"
  - Name: "Prerequisites"
    Content: "Bulleted list of requirements"
  - Name: "MainContent"
    Content: "Follows appropriate structure for document type"
  - Name: "Conclusion"
    Content: "Summary and next steps"
```


## Document Types and Their Styles

### Documentation (Docs)

**Purpose**: Comprehensive technical documentation for Igniter.js features, APIs, and concepts
**Location**: `apps/www/content/docs/`

#### Frontmatter Schema
```yaml
---
title: "Feature Name"
description: "Brief description of the feature or concept"
---
```

#### Writing Rules
- Start with H2 headings (never H1 - title from frontmatter is H1)
- Use `<Callout>` for important notes, warnings, and tips
- Include working code examples for every concept
- Use `<TypeTable>` for API documentation
- Add `<Steps>` for setup instructions
- Use `<Tabs>` for package manager commands with `groupId="package-manager"`

#### Structure Template
```mdx
---
title: "Feature Name"
description: "What this feature does in one sentence"
---

## Introduction

Brief overview of what this feature solves.

<Callout type="info">
  Important context or prerequisite knowledge.
</Callout>

## Installation

<Tabs items={['npm', 'pnpm', 'yarn', 'bun']} groupId="package-manager">
  <Tab value="npm">
    ```bash
    npm install package-name
    ```
  </Tab>
  <!-- Other package managers -->
</Tabs>

## Basic Usage

Simple example showing the feature in action:

```typescript
// Complete, runnable example
import { feature } from '@igniter-js/core';

const result = feature();
```

## API Reference

<TypeTable type={{
  propName: {
    type: 'string',
    description: 'What this prop does',
    required: true
  }
}} />

## Advanced Usage

More complex scenarios and edge cases.

## Troubleshooting

Common issues and solutions.
```

### Blog Posts

**Purpose**: Announcements, tutorials, and thought leadership
**Location**: `apps/www/content/blog/`

#### Frontmatter Schema
```yaml
---
title: "Post Title"
description: "Engaging description for SEO and previews"
cover: "https://example.com/cover.jpg" # Optional
tags: ["tutorial", "announcement"] # Optional
---
```

#### Writing Rules
- Use engaging, conversational tone
- Include real-world examples and use cases
- Add visual elements (images, diagrams) when helpful
- Use `<Callout>` for key takeaways
- Include code examples with syntax highlighting
- End with clear next steps or call-to-action

#### Structure Template
```mdx
---
title: "Introducing Feature X"
description: "How Feature X revolutionizes your workflow"
tags: ["announcement", "feature"]
---

## The Problem

Describe the pain point this addresses.

## The Solution

How Igniter.js solves this problem.

```typescript
// Show the feature in action
const example = createFeature({
  // ...
});
```

<Callout type="success" title="Key Benefit">
  Highlight the main advantage.
</Callout>

## How It Works

Deeper explanation with examples.

## Getting Started

<Steps>
  <Step>
    ### Install
    Installation instructions
  </Step>
  <Step>
    ### Configure
    Configuration steps
  </Step>
</Steps>

## What's Next

Future plans and how to get involved.
```

### Templates

**Purpose**: Showcase starter templates and their features
**Location**: `apps/www/content/templates/`

#### Frontmatter Schema
```yaml
---
title: "Template Name"
description: "What this template provides"
framework: "Next.js" # or "Bun", "Express", etc.
demo: "https://demo-url.com"
repository: "https://github.com/repo" # Optional
stack: ["TypeScript", "Prisma", "Redis"]
useCases: ["Full-Stack", "API"]
creator:
  username: "github-username"
  name: "Display Name" # Optional
  avatar: "https://avatar-url" # Optional
---
```

#### Writing Rules
- Focus on what the template provides out-of-the-box
- Use `<Files>` component to show project structure
- Include quick start instructions with `<Steps>`
- Show key features with code examples
- Add deployment instructions
- Use `<Callout>` for important setup notes

#### Structure Template
```mdx
---
title: "Next.js Full-Stack Starter"
description: "Production-ready Next.js app with Igniter.js"
framework: "Next.js"
demo: "https://demo.vercel.app"
stack: ["Next.js", "TypeScript", "Prisma", "Tailwind CSS"]
useCases: ["Full-Stack"]
creator:
  username: "felipebarcelospro"
---

## Overview

What this template includes and who it's for.

## Features

- ‚úÖ Feature 1
- ‚úÖ Feature 2
- ‚úÖ Feature 3

## Project Structure

<Files>
  <Folder name="src" defaultOpen>
    <Folder name="features">
      <File name="users.controller.ts" />
    </Folder>
    <File name="igniter.ts" />
  </Folder>
</Files>

## Quick Start

<Steps>
  <Step>
    ### Clone and Install
    ```bash
    git clone repo-url
    npm install
    ```
  </Step>
  
  <Step>
    ### Configure Environment
    ```bash
    cp .env.example .env
    ```
  </Step>
  
  <Step>
    ### Run Development Server
    ```bash
    npm run dev
    ```
  </Step>
</Steps>

<Callout type="info">
  Important configuration notes.
</Callout>

## Key Features Explained

### Feature 1

Code example showing the feature.

## Deployment

Instructions for deploying to production.
```

### Learn Course (Tutorial Chapters)

**Purpose**: Step-by-step tutorial chapters for building applications with Igniter.js
**Location**: `apps/www/content/learn/`

#### Frontmatter Schema
```yaml
---
title: "XX: Chapter Title"
description: "What you'll learn in this chapter"
---
```

#### Course-Specific Components

These components are available only in the learn course:

- **`<ChapterObjectives />`** - Lists learning objectives at the start of each chapter
- **`<ChapterNav />`** - Navigation between chapters at the end
- **`<Quiz />`** - Interactive quizzes to test understanding

#### Writing Rules for Course Chapters

- **Start with Objectives**: Use `<ChapterObjectives>` to list what students will learn
- **Explain Before Showing**: Always explain concepts before diving into code
- **Complete Code Examples**: Every code block must be complete, runnable, and tested
- **Business Logic Comments**: Use `// Business Rule:` and `// Observation:` comments to explain code logic
- **"Understanding..." Sections**: Include sections like "Understanding the Controller" to deepen knowledge
- **Show Real APIs**: Always use actual Igniter.js APIs from `packages/` - verify before writing
- **Include Quiz Questions**: Add `<Quiz>` components to reinforce key concepts
- **Chapter Navigation**: Always end with `<ChapterNav>` linking to next chapter
- **File Paths**: Use `<Files>` component to show project structure frequently
- **Callouts for Tips**: Use `<Callout type="info">` for tips and `<Callout type="success">` for achievements

#### Code Comment Patterns

When writing code examples for the course, use these comment patterns:

```typescript
// Business Rule: Explains why a business decision was made
// This helps students understand not just what, but why

// Observation: Explains what's happening or what to notice
// Useful for highlighting important patterns or behaviors
```

#### Structure Template for Course Chapters

```mdx
---
title: "03: Your First Feature"
description: "Generate and understand your first Igniter.js feature"
---

<ChapterObjectives
  objectives={[
    { text: 'Use the CLI to generate a feature' },
    { text: 'Understand the feature structure' },
    { text: 'Learn how controllers handle HTTP requests' }
  ]}
/>

## Introduction

Brief context about what we're building and why.

## Step-by-Step Instructions

Detailed instructions with complete code examples.

```typescript
// Business Rule: Why we do this
import { igniter } from "@/igniter";

export const myController = igniter.controller({
  // Complete implementation
});
```

### Understanding the Code

Deep dive into what the code does and why it works this way.

<Callout type="info" title="Key Concept">
  Important insight about the pattern we just used.
</Callout>

## Testing Your Implementation

How to verify everything works.

<Quiz
  question="What does this pattern accomplish?"
  options={[
    { label: 'Option 1', value: 'a' },
    { label: 'Correct option', value: 'b', isCorrect: true }
  ]}
  explanation="Why this is the correct answer."
/>

<ChapterNav
  current={{
    number: 3,
    title: "Your First Feature"
  }}
  next={{
    number: 4,
    title: "Authentication",
    description: "Build a complete authentication system",
    href: "/learn/04-authentication"
  }}
/>
```

#### Example Chapter Structure Pattern

Every chapter should follow this flow:

1. **ChapterObjectives** - What students will learn
2. **Introduction** - Context and overview
3. **Step-by-Step Instructions** - Complete, verified code examples
4. **Understanding Sections** - Deep dives into concepts
5. **Testing** - How to verify it works
6. **Quiz** - Reinforce key concepts
7. **ChapterNav** - Link to next chapter

### Updates (Changelog)

**Purpose**: Version updates and changelog entries
**Location**: `apps/www/content/updates/`

#### Frontmatter Schema
```yaml
---
title: "v1.2.0 - Feature Release"
description: "What's new in this version"
cover: "cover-image-url" # Optional
---
```

#### Writing Rules
- Start with version number and release date
- Group changes by category (Features, Bug Fixes, Breaking Changes)
- Use bullet points for individual changes
- Link to relevant documentation
- Include migration guides for breaking changes
- Use `<Callout type="warn">` for breaking changes

#### Structure Template
```mdx
---
title: "v1.2.0 - Real-Time Features"
description: "Added SSE support and real-time data synchronization"
---

Released on October 28, 2025

## üéâ Features

- **Real-Time Updates**: Added SSE-based real-time data synchronization
- **New Adapter**: Redis adapter for caching and pub/sub
- **Improved DX**: Better TypeScript inference for controllers

## üêõ Bug Fixes

- Fixed type inference issue in nested controllers
- Resolved memory leak in job queue

## ‚ö†Ô∏è Breaking Changes

<Callout type="warn" title="Migration Required">
  The `createController` function signature has changed.
</Callout>

### Before
```typescript
createController({ path: '/users' })
```

### After
```typescript
igniter.controller({ path: '/users' })
```

## üìö Documentation

- Updated [Controller Guide](/docs/controllers)
- New [Real-Time Guide](/docs/real-time)

## üîó Links

- [Full Changelog](https://github.com/org/repo/releases/tag/v1.2.0)
- [Migration Guide](/docs/migration/v1.2)
```

---

## MDX Documentation Formatting Rules

### Document Structure

1. **Frontmatter requirements**:
   ```mdx
   ---
   title: "Component Name"
   description: "A brief single-paragraph description of the component or feature."
   ---
   ```

2. **Heading hierarchy**:
   - Never use H1 - the title from frontmatter serves as H1
   - Start document structure with H2
   - Maintain proper nesting of headings (H2 ‚Üí H3 ‚Üí H4)


3. **Code formatting**:
   - Inline code: Use backticks for properties, functions, variables: `useState`
   - Code blocks: Use triple backticks with language identifier
     ```jsx
     function Example() {
       return <div>Example component</div>;
     }
     ```

4. **Terminology consistency**:
   - Define terms on first use: "Content Delivery Network (CDN)"
   - Use the same term throughout the document

### Machine-Readable Patterns for LLMs

When writing documentation that will be processed by LLMs, follow these additional patterns:

1. **Explicit section markers**: Use clear heading patterns and consistent depth
2. **Pattern-based formatting**: Keep similar content in predictable structures
3. **Numbered instructions**: Use explicit numbers for sequential steps
4. **Key-value patterns**: Format properties, parameters and configurations as distinct key-value pairs
5. **Contrastive examples**: Always provide both correct and incorrect examples
6. **Semantic indicators**: Use formatting (bold, italics, code blocks) consistently for semantic meaning

---

## Visual Structure & DX Best Practices

Optimize documentation for scanning, understanding, and action. These patterns improve developer experience significantly.

### Content Hierarchy Patterns

**1. Progressive Disclosure**
- Start with **what** ‚Üí then **why** ‚Üí then **how**
- Use overview sections before diving into details
- Place advanced topics after basic ones

```mdx
## Overview
High-level explanation of what this feature does.

## Quick Start
Get something working immediately.

## Understanding the Concepts
Deeper explanation after hands-on experience.

## Advanced Usage
More complex scenarios and edge cases.
```

**2. Section Naming Conventions**
- **"Understanding..."** - Use after showing code to explain concepts
- **"Key Concepts"** - Summary of important ideas
- **"Testing..."** - How to verify something works
- **"Why...?"** - Explains decisions and trade-offs
- **"Common Patterns"** - Frequently used approaches

**3. Visual Breathing Room**
- Add horizontal rules (`---`) between major sections
- Use spacing to separate concepts, not just headings
- Group related content with consistent patterns

### Code Example Patterns

**1. Complete vs. Snippets**
- **Complete examples**: For tutorials, course, getting started
- **Snippets**: For reference docs showing specific patterns
- Always include necessary imports in complete examples

**2. Progressive Code Examples**
```mdx
### Basic Example
```typescript
// Simple, minimal working example
```

### Adding Features
```typescript
// Builds on basic example
```

### Production Ready
```typescript
// Complete example with error handling, etc.
```
```

**3. Before/After Comparisons**
Use `<Tabs>` to show different approaches:

```mdx
<Tabs items={['Without Feature', 'With Feature']}>
  <Tab value="Without Feature">
    ```typescript
    // Old way
    ```
  </Tab>
  <Tab value="With Feature">
    ```typescript
    // New way - better!
    ```
  </Tab>
</Tabs>
```

### Comparison Tables

Use tables for feature comparisons, API differences, etc.:

```mdx
| Feature | Option A | Option B |
|---------|----------|----------|
| Type Safety | ‚úÖ Full | ‚ö†Ô∏è Partial |
| Performance | ‚ö° Fast | ‚ö°‚ö° Faster |
```

**When to use tables:**
- Comparing multiple options/features
- Showing configuration differences
- Listing pros/cons side-by-side
- API parameter comparisons

### Callout Strategy

**Strategic use of callouts:**
- `<Callout type="info">` - Context, prerequisites, background
- `<Callout type="warn">` - Potential issues, breaking changes
- `<Callout type="success">` - Achievements, checkpoints, wins
- `<Callout type="error">` - Critical errors, things that will break

**Callout placement:**
- **Before code**: Warnings, prerequisites
- **After code**: Success messages, next steps
- **Standalone**: Important context, tips

### Lists and Formatting

**1. Bullet Lists** - Use for:
- Features
- Steps without strict order
- Options to choose from
- Benefits/consequences

**2. Numbered Lists** - Use for:
- Sequential steps
- Ordered priorities
- Step-by-step instructions

**3. Bold Text** - Use for:
- Key concepts (first mention)
- Important terms
- Emphasis on critical information

**4. Inline Code** - Use for:
- Function names: `igniter.controller()`
- File paths: `src/features/user/`
- Config values: `"production"`
- API endpoints: `/api/v1/users`

### Cross-References and Links

**1. Internal Links**
- Link to related concepts: `[See Controllers](/docs/controllers)`
- Use descriptive link text, not "click here"
- Include context: "To learn more, see [Authentication](/docs/auth)"

**2. Related Sections**
Use callouts to guide readers:

```mdx
<Callout type="info" title="Related">
  This builds on concepts from [Procedures](/docs/procedures). 
  Make sure you understand those first.
</Callout>
```

**3. Next Steps**
Always guide readers forward:

```mdx
## Next Steps

- Try building [Feature X](/docs/feature-x)
- Read about [Concept Y](/docs/concept-y)
- Explore [Advanced Patterns](/docs/advanced)
```

### Common Patterns

**1. "Understanding..." Sections**
After showing code, explain it:

```mdx
```typescript
// Code example here
```

### Understanding the Code

Break down what the code does and why it works.
```

**2. Key Concepts Recap**
After complex sections:

```mdx
## Key Concepts Review

**1. Concept Name**: Brief explanation
**2. Another Concept**: Brief explanation
```

**3. Testing Patterns**
Always show how to verify:

```mdx
## Testing Your Implementation

1. Run the dev server
2. Navigate to `/your-endpoint`
3. You should see...
```

**4. Error Prevention**
Highlight common mistakes:

```mdx
<Callout type="warn" title="Common Mistake">
  Don't forget to... Many developers miss this step!
</Callout>
```

### Visual Organization Rules

**1. Section Length**
- Keep sections focused (200-400 words ideal)
- Break long sections into subsections
- Use visual breaks (hrules, callouts) for separation

**2. Heading Depth**
- H2 for major sections
- H3 for subsections
- H4 sparingly (only when truly needed)
- Never skip heading levels

**3. Code Block Context**
Always provide context before code:

```mdx
## Creating a Controller

To create a controller, follow this pattern:

```typescript
// Code here
```

This pattern ensures type safety...
```

**4. Emphasis Hierarchy**
- **Bold** for important concepts/terms
- *Italic* for emphasis within sentences
- `Code` for technical terms
- **Bold + Code** for highlighting API usage: **`igniter.controller()`**

### Tables of Contents (ToC)

For longer documents, consider structured ToC:

```mdx
## In This Chapter

- [Setting Up](#setting-up)
- [Configuration](#configuration)
- [Usage Examples](#usage-examples)
- [Troubleshooting](#troubleshooting)
```

### Visual Aids

**1. Diagrams** - Use Mermaid for:
- Architecture diagrams
- Data flow
- Component relationships

**2. Screenshots** - When helpful:
- UI components
- CLI output
- IDE configurations

**3. Animated Gifs/Videos** - For:
- Complex workflows
- Tool demonstrations
- Multi-step processes

## Content Quality Checklist

### For All Content Types

- [ ] Frontmatter is complete with required fields
- [ ] No H1 headings in document body (title from frontmatter)
- [ ] Code examples are complete and runnable
- [ ] Inline code uses backticks for technical terms
- [ ] Links are valid and properly formatted
- [ ] Images have alt text
- [ ] Terminology is consistent throughout
- [ ] Visual hierarchy is clear (proper heading levels)
- [ ] Callouts used strategically, not excessively
- [ ] Related content cross-referenced appropriately

### For Documentation

- [ ] Installation instructions use `<Tabs>` with `groupId="package-manager"`
- [ ] Important notes use `<Callout>` with appropriate type
- [ ] Setup instructions use `<Steps>` component
- [ ] API documentation uses `<TypeTable>` when appropriate
- [ ] File structures use `<Files>`, `<Folder>`, `<File>` components
- [ ] Code blocks specify language for syntax highlighting

### For Blog Posts

- [ ] Has engaging title and description
- [ ] Includes practical examples
- [ ] Has clear introduction and conclusion
- [ ] Tags are relevant and helpful
- [ ] Contains call-to-action or next steps

### For Templates

- [ ] All frontmatter schema fields are present
- [ ] Project structure uses `<Files>` component
- [ ] Quick start uses `<Steps>` component
- [ ] Demo and repository links are valid
- [ ] Stack and use cases are clearly defined

### For Updates

- [ ] Version number in title
- [ ] Changes grouped by category
- [ ] Breaking changes use warning callouts
- [ ] Migration guides included when needed
- [ ] Links to relevant documentation

---

## Fumadocs Component Reference

### Quick Reference Table

| Component | Use Case | Required Props | Example |
|-----------|----------|----------------|---------|
| `<Callout>` | Highlights, warnings, tips | `type` | `<Callout type="warn">...</Callout>` |
| `<Steps>` | Sequential instructions | None | `<Steps><Step>...</Step></Steps>` |
| `<Tabs>` | Alternative options | `items`, `groupId` (optional) | `<Tabs items={['npm', 'pnpm']}>` |
| `<Accordion>` | Collapsible content | `title` | `<Accordion title="FAQ">...</Accordion>` |
| `<Files>` | File structure | None | `<Files><Folder>...</Folder></Files>` |
| `<TypeTable>` | API documentation | `type` | `<TypeTable type={{...}} />` |
| `<Card>` | Feature highlights | `title`, `href` (optional) | `<Card title="Feature">...</Card>` |

### Callout Types and When to Use

```mdx
<!-- Information and tips -->
<Callout type="info" title="Good to Know">
  Additional context that helps understanding.
</Callout>

<!-- Warnings and cautions -->
<Callout type="warn" title="Important">
  Something that could cause issues if ignored.
</Callout>

<!-- Errors and critical issues -->
<Callout type="error" title="Breaking Change">
  Something that will break existing code.
</Callout>

<!-- Success and achievements -->
<Callout type="success" title="Pro Tip">
  Best practices and optimizations.
</Callout>
```

### Package Manager Tabs (Standard Pattern)

Always use this exact pattern for package installation:

```mdx
<Tabs items={['npm', 'pnpm', 'yarn', 'bun']} groupId="package-manager">
  <Tab value="npm">
    ```bash
    npm install package-name
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm add package-name
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    yarn add package-name
    ```
  </Tab>
  <Tab value="bun">
    ```bash
    bun add package-name
    ```
  </Tab>
</Tabs>
```

### File Structure Pattern

```mdx
<Files>
  <Folder name="src" defaultOpen>
    <Folder name="features">
      <File name="users.controller.ts" />
      <File name="posts.controller.ts" />
    </Folder>
    <Folder name="lib">
      <File name="database.ts" />
    </Folder>
    <File name="igniter.ts" />
  </Folder>
  <File name="package.json" />
</Files>
```

---

## Common Patterns and Examples

### Feature Documentation Pattern

```mdx
---
title: "Feature Name"
description: "What it does in one sentence"
---

## Introduction

Brief overview and use case.

<Callout type="info">
  Important prerequisite or context.
</Callout>

## Installation

<Tabs items={['npm', 'pnpm', 'yarn', 'bun']} groupId="package-manager">
  <Tab value="npm">
    ```bash
    npm install @igniter-js/package
    ```
  </Tab>
  <!-- Other package managers -->
</Tabs>

## Quick Start

<Steps>
  <Step>
    ### Step Title
    Instructions and code example
  </Step>
  
  <Step>
    ### Next Step
    More instructions
  </Step>
</Steps>

## Examples

### Basic Example

```typescript
// Complete, runnable example
```

### Advanced Example

```typescript
// More complex scenario
```

## API Reference

<TypeTable type={{
  propName: {
    type: 'string',
    description: 'Description',
    required: true
  }
}} />
```

### Tutorial Pattern

```mdx
---
title: "Building X with Igniter.js"
description: "Learn how to build X from scratch"
tags: ["tutorial"]
---

## What You'll Build

Description and screenshot/demo of final result.

## Prerequisites

- Node.js 18+
- Basic TypeScript knowledge
- Igniter.js installed

## Project Setup

<Steps>
  <Step>
    ### Create Project
    ```bash
    npx create-igniter-app my-app
    ```
  </Step>
  
  <Step>
    ### Install Dependencies
    <Tabs items={['npm', 'pnpm']} groupId="package-manager">
      <Tab value="npm">
        ```bash
        npm install
        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>

## Implementation

### Part 1: Feature Setup

Code and explanation.

<Callout type="success">
  Checkpoint: You should now see...
</Callout>

### Part 2: Adding Functionality

More code and explanation.

## Testing

How to verify it works.

## Next Steps

- Try adding feature Y
- Read about concept Z
- Deploy to production
```

---

## Migration Guide: Converting Existing Content

### From Old Blog to Fumadocs Blog

1. Extract frontmatter from Next.js page structure
2. Move MDX content to `apps/www/content/blog/`
3. Update frontmatter to match schema
4. Convert components to Fumadocs equivalents
5. Test rendering in new structure

### From App Templates to Template Docs

1. Create MDX file in `apps/www/content/templates/`
2. Fill frontmatter with template metadata
3. Add project structure with `<Files>` component
4. Include quick start with `<Steps>`
5. Link to live demo and repository

### Changelog to Updates

1. Group commits by version
2. Create update file per version
3. Categorize changes (Features, Fixes, Breaking)
4. Add migration guides for breaking changes
5. Link to relevant documentation

---

## AI Agent Guidelines

When generating content as an AI agent:

1. **Verify Implementation First**: Before writing any code example, search `packages/` and read the actual implementation
2. **Always read the relevant instruction file first** (this file)
3. **Match the document type** to the appropriate section above
4. **Use exact frontmatter schemas** as defined
5. **Implement Fumadocs components** where appropriate
6. **Follow formatting patterns** consistently
7. **Include complete code examples** that users can copy-paste and that match the real API
8. **Verify API usage** by checking interfaces, types, and existing examples
9. **Test all links** before submitting
10. **Use consistent terminology** from the Igniter.js docs
11. **Add helpful callouts** strategically (not excessively)
12. **Structure content** for easy scanning using visual hierarchy principles
13. **For course chapters**: Use `<ChapterObjectives>`, `<Quiz>`, and `<ChapterNav>` components
14. **Apply DX best practices**: Progressive disclosure, visual breathing room, clear cross-references
15. **Review visual structure**: Ensure content is scannable and well-organized

### Content Generation Workflow

```
1. Identify content type (docs/blog/template/update/learn)
2. VERIFY IMPLEMENTATION: Search packages/ and read source code
3. Read relevant schema and rules from this file
4. Create frontmatter with all required fields
5. Structure content using appropriate pattern
6. Add Fumadocs components for better UX
7. Include code examples that match the verified implementation
8. Review against quality checklist
9. Ensure all links and references are valid
10. For course: Add ChapterObjectives, Quiz, and ChapterNav
```

### Verification Workflow for Code Examples

When including code examples, follow this process:

1. **Find the Implementation**
   ```bash
   # Search for the function/class/interface in packages/
   grep -r "igniter.controller" packages/
   ```

2. **Read the Source**
   - Open the file where it's defined
   - Check function signatures
   - Read JSDoc comments
   - Review type definitions

3. **Check Usage Examples**
   - Look for tests in `packages/*/tests/`
   - Check existing documentation
   - Review examples in `apps/` directories

4. **Verify Your Example**
   - Ensure imports are correct
   - Check parameter names match the interface
   - Verify return types
   - Confirm method names are accurate

5. **Test Compilation**
   - Ensure TypeScript types are correct
   - Verify the code would compile
   - Check for missing dependencies